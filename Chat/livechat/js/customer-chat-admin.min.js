! function(t, e) {
    t.Application = e.extend({
        model: {},
        view: {},
        service: {},
        template: {}
    }, Backbone.Events)
}(window, _),
function(t, e, s) {
    t.SoundPlayer = function() {
        this.play = function() {};
        var t = [];
        this.addSounds = function(e) {
            t.push(e)
        };
        var i = this;
        e.setup({
            url: s.rootPath + "swf/",
            onready: function() {
                if (i.play = function(t) {
                        e.play(t)
                    }, i.addSounds = function(t) {
                        for (var i in t) e.createSound({
                            id: i,
                            url: s.rootPath + t[i],
                            autoLoad: !0,
                            autoPlay: !1,
                            volume: 100
                        })
                    }, i.addSounds({
                        message: s.ui.messageSound
                    }), t.length > 0)
                    for (var a = 0; a < t.length; a++) i.addSounds(t[a])
            }
        })
    }
}(window.Application, soundManager, chatConfig),
function(t, e, s) {
    t.UISettingsModel = Backbone.Model.extend({
        initialize: function() {
            this.fetch()
        },
        fetch: function() {
            var t = this;
            e.get(s.getSettingsPath, function(e) {
                e.success && t.set(e.settings)
            })
        },
        save: function() {
            arguments.length > 0 && this.set.apply(this, arguments), this.trigger("request");
            var t = this;
            e.post(s.updateSettingsPath, this.attributes, function() {
                t.trigger("sync")
            })
        },
        reset: function() {
            var t = this;
            e.post(s.resetSettingsPath, function(e) {
                e.success && (t.set(e.settings, {
                    silent: !0
                }), t.trigger("change"))
            })
        }
    })
}(window.Application, jQuery, window.chatConfig, _),
function(t, e, s) {
    t.LogsModel = Backbone.Model.extend({
        fetch: function() {
            this.trigger("request");
            var t = this;
            e.get(s.getLogsPath, function(e) {
                t.set("content", e), t.trigger("sync")
            })
        },
        set: function(t, e) {
            var s = "string" == typeof this.attributes[t] ? this.attributes[t].length : 0;
            this.attributes[t] = e;
            var i = "string" == typeof this.attributes[t] ? this.attributes[t].length : 0;
            i !== s && (this.trigger("change:" + t, this, this.attributes[t]), this.trigger("change", this))
        },
        clear: function(t, i) {
            this.trigger("request");
            var a = this;
            e.get(s.clearLogsPath, function(e) {
                e.success ? (a.set("content", ""), a.trigger("sync"), t && t()) : i && i()
            })
        }
    })
}(window.Application, jQuery, window.chatConfig),
function(t, e, s, i) {
    t.CannedMessagesModel = Backbone.Model.extend({
        defaults: {
            messages: []
        },
        initialize: function() {
            this.user = t.model.user, this.fetch()
        },
        fetch: function() {
            var t = this;
            e.get(s.listCannedMessagesPath, function(e) {
                e.success && t.set("messages", e.messages)
            })
        },
        saveMessage: function(t) {
            this.trigger("request");
            var i = this;
            e.post(s.updateCannedMessagePath, t, function(e) {
                e.success ? (e.id && (t.id = e.id, i.getById(e.id) || i.get("messages").push(t)), i.trigger("sync message:saved change:messages change", t)) : i.trigger("operator:saveError", e.errors)
            })
        },
        getById: function(t) {
            for (var e = this.get("messages"), s = 0; s < e.length; s++)
                if (e[s].id === t) return e[s];
            return null
        },
        deleteMessage: function(t) {
            for (var i = this.get("messages"), a = 0; a < i.length; a++)
                if (i[a].id === t) {
                    i.splice(a, 1);
                    break
                }
            var n = this;
            e.post(s.deleteCannedMessagePath, {
                id: t
            }, function(t) {
                n.trigger(t.success ? "change:messages message:deleted" : "message:deleteError")
            })
        },
        getParametrizedMessage: function(t) {
            var e = i.template(t, void 0, {
                interpolate: /\{(.+?)\}/g
            });
            return e(this.user.attributes)
        }
    })
}(window.Application, jQuery, window.chatConfig, _),
function(t, e) {
    t.AdminSettingsModel = Backbone.Model.extend({
        defaults: {
            sound: !0,
            scroll: !0,
            emots: !0
        },
        initialize: function() {
            this.fetch(), this.on("change", this.save, this)
        },
        save: function() {
            e.cookie("customer-chat-admin-settings", JSON.stringify(this.attributes))
        },
        fetch: function() {
            e.cookie("customer-chat-admin-settings") && this.set(JSON.parse(e.cookie("customer-chat-admin-settings")))
        }
    })
}(window.Application, jQuery),
function(t, e) {
    t.MessageModel = Backbone.Model.extend({
        defaults: {
            author: "",
            body: "",
            toAuthor: "all",
            toAuthorMail: ""
        },
        initialize: function(t, e) {
            if (this.options = e || {}, t) {
                if ("string" == typeof t.datetime ? this.set("time", new Date(t.datetime.replace(/-/g, "/"))) : "object" == typeof t.datetime && this.set("time", t.datetime), "string" == typeof t.from_user_info && "all" !== t.from_user_info) try {
                    t.from_user_info = JSON.parse(t.from_user_info)
                } catch (s) {}
                if ("object" == typeof t.from_user_info) {
                    var i = t.from_user_info;
                    this.fromUser = i, 0 === this.get("author").length && this.set("author", i.name), this.has("authorMail") || this.set("authorMail", i.mail)
                }
                if ("string" == typeof t.to_user_info && "all" !== t.to_user_info) try {
                    t.to_user_info = JSON.parse(t.to_user_info)
                } catch (s) {}
                if ("object" == typeof t.to_user_info) {
                    var a = t.to_user_info;
                    this.toUser = a, this.set("toAuthor", a.name), this.set("toAuthorMail", a.mail)
                }
            }
        },
        getAge: function() {
            var t = Math.floor((new Date).getTime() / 1e3),
                s = Math.floor(this.get("time").getTime() / 1e3 - (this.options.localMessage ? 0 : e.serverTimeDifference));
            return Math.ceil(t - s)
        },
        getReadableName: function() {
            var t = this.get("author");
            return -1 !== t.lastIndexOf("-") ? t.slice(0, t.lastIndexOf("-")) : t
        },
        getToUserReadableName: function() {
            var t = this.get("toAuthor");
            return -1 !== t.lastIndexOf("-") ? t.slice(0, t.lastIndexOf("-")) : t
        },
        getTalkName: function() {
            var t = this.get("toAuthor");
            return this.getReadableName() + (t ? "/" + (-1 !== t.lastIndexOf("-") ? t.slice(0, t.lastIndexOf("-")) : t) : "")
        }
    })
}(window.Application, window.chatConfig),
function(t) {
    t.UserModel = Backbone.Model.extend({
        initialize: function(t) {
            if ("string" == typeof t.info) try {
                t.info = JSON.parse(t.info)
            } catch (e) {}
        },
        getAge: function() {
            this.chat = t.model.chat;
            var e = (new Date).getTime() / 1e3,
                s = this.get("time").getTime() / 1e3;
            return Math.ceil(e - s)
        },
        getReadableName: function() {
            var t = this.get("name");
            return -1 !== t.lastIndexOf("-") ? t.slice(0, t.lastIndexOf("-")) : t
        },
        hasRole: function(t) {
            return -1 !== this.get("roles").indexOf(t)
        }
    })
}(window.Application),
function(t) {
    t.ChatViewModel = Backbone.Model.extend({
        defaults: {
            name: "anonymous",
            mail: ""
        }
    })
}(window.Application, jQuery, window.chatConfig, _),
function(t, e, s, i) {
    var a = t.AdminChatModel = Backbone.Model.extend({
        defaults: {
            name: "anonymous",
            mail: ""
        },
        usersCache: {},
        guestsCache: {},
        lastMessages: [],
        readMessages: {},
        operatorsReady: !1,
        lastTypingUpdate: 0,
        talkingUsersIds: [],
        initialize: function() {
            this.user = t.model.user, this.once("change:operators", function() {
                this.operatorsReady = !0
            }, this), this.on("user:store", this.handleTypingUser, this), this.manageConnection()
        },
        checkUsers: function() {
            var t = this;
            e.get(s.getOnlineUsersPath, function(e) {
                e.success && t.trigger("users:online", e.users)
            })
        },
        keepAlive: function() {
            e.get(s.keepAlivePath)
        },
        handleTypingUser: function(t) {
            -1 === this.talkingUsersIds.indexOf(t.id) && this.talkingUsersIds.push(t.id)
        },
        updateTypingStatus: function(t) {
            var i = (new Date).getTime();
            this.lastTypingUpdate + a.POLLING_INTERVAL < i && (this.lastTypingUpdate = i, e.post(s.updateTypingStatusPath, {
                secondUserId: t,
                status: !0
            }))
        },
        getTypingStatus: function() {
            if (this.talkingUsersIds.length > 0) {
                var t = this;
                e.post(s.getTypingStatusPath, {
                    ids: this.talkingUsersIds
                }, function(e) {
                    if (e.success) {
                        var s = t.filterTyping(e.results);
                        s.length > 0 && t.trigger("users:typing", s)
                    }
                })
            }
        },
        filterTyping: function(t) {
            var e = [];
            for (var s in t) t[s] && e.push(s);
            return e
        },
        getMessages: function() {
            var t = this;
            e.get(s.newMessagesPath, function(e) {
                e = e.messages, e.length > 0 && (e = t.filterNewMessages(e), t.loadUsersData(e, function() {
                    t.trigger("messages:new", e)
                }))
            })
        },
        getLastMessages: function(t, i, a) {
            e.post(s.lastMessagesPath, {
                lastMsgId: i,
                guestId: t
            }).success(function(t) {
                a(t.messages)
            }).fail(function() {
                a([])
            })
        },
        storeUser: function(t) {
            this.usersCache[t.id] = t, this.trigger("user:store", t)
        },
        storeGuest: function(t) {
            this.guestsCache[t.id] = t
        },
        clearOperator: function(t) {
            delete this.usersCache[t.id]
        },
        clearGuest: function(t) {
            delete this.guestsCache[t.id]
        },
        loadOperators: function() {
            var t = this;
            e.get(s.listOperatorsPath, function(e) {
                i.each(e.users, function(e) {
                    t.storeUser(e)
                }), t.trigger("change:operators")
            })
        },
        getOperators: function() {
            var t = [];
            for (var e in this.usersCache) t.push(this.usersCache[e]);
            return t
        },
        getOperator: function(t) {
            return this.usersCache[t]
        },
        getGuest: function(t) {
            return this.guestsCache[t]
        },
        saveOperator: function(t) {
            var a = i.clone(t);
            a.roles = a.roles.join(",");
            var n = this;
            e.post(s.saveOperatorPath, a, function(e) {
                e.success ? (e.id && (t.id = e.id), n.storeUser(t), n.trigger("change:operators operator:saved", t)) : n.trigger("operator:saveError", e.errors)
            })
        },
        deleteOperator: function(t) {
            this.clearOperator(t);
            var i = this;
            e.post(s.deleteOperatorPath, t, function(t) {
                i.trigger(t.success ? "change:operators operator:deleted" : "operator:deleteError")
            })
        },
        loadUsersData: function(t, i) {
            for (var a = this, n = 0, o = 0; o < t.length; o++) {
                var r = t[o];
                this.usersCache[r.from_id] || (n++, e.post(s.getUserPath, {
                    id: r.from_id
                }).success(function(t) {
                    t.success && a.storeUser(t.user)
                }).always(function() {
                    n--, 0 >= n && i()
                }))
            }
            0 >= n && i()
        },
        getOperatorName: function(t) {
            return this.usersCache[t] && this.usersCache[t].name
        },
        queryHistory: function(t, i, a) {
            e.post(s.queryHistoryPath, {
                query: JSON.stringify(t)
            }, function(t) {
                i(t)
            }).fail(a)
        },
        clearHistory: function(t, i) {
            e.post(s.clearHistoryPath, function(e) {
                e.success ? t(e) : i(e)
            }, "JSON").fail(i)
        },
        sendMessage: function(t) {
            var i = {
                    to: t.get("to"),
                    body: t.get("body")
                },
                a = this;
            e.post(s.sendMessagePath, i, function(t) {
                t.success ? a.trigger("messages:sent", t.to, t.message) : a.trigger("messages:sendError")
            })
        },
        manageConnection: function() {
            function t() {
                e.user.hasRole("OPERATOR") && (e.getMessages(), e.keepAlive(), e.getTypingStatus()), e.checkUsers()
            }
            var e = this;
            setInterval(t, a.POLLING_INTERVAL), t()
        },
        filterNewMessages: function(t) {
            var e = [];
            return i.each(t, function(t) {
                var s = this.readMessages[t.talk_id];
                (!s || t.id > s) && (e.push(t), this.readMessages[t.talk_id] = t.id)
            }, this), e
        }
    }, {
        POLLING_INTERVAL: 5e3
    })
}(window.Application, jQuery, window.chatConfig, _),
function(t, e, s) {
    var i = /(\w+:\/\/)?([\da-z\.\-@]+)\.([a-z\.]{2,})([?&=%#;\/\w\.-]*)*\/?/g,
        a = t.MessageView = Backbone.View.extend({
            initialize: function() {
                this.settings = t.model.settings, this.listenTo(this.model, "change", this.render), this.render(), this.$el.hide(), this.$el.fadeIn("fast")
            },
            render: function() {
                this.$el.html(s(t.template.message)), this.$time = this.$(".customer-chat-content-message-time");
                var e = this.model.get("body").split("<").join("&lt;").split(">").join("&gt;");
                e = this.prepareMessage(e), this.$(".customer-chat-content-message-author").html(this.model.getReadableName() || this.model.get("author")), this.$(".customer-chat-content-message-body").html(e), this.updateTime(!0), "operator" == this.model.get("authorType") && (this.$(".customer-chat-content-message").removeClass("customer-chat-content-message").addClass("customer-chat-content-message-operator"), this.$(".customer-chat-content-message-avatar").removeClass("customer-chat-content-message-avatar").addClass("customer-chat-content-message-avatar-operator")), this.model.fromUser && this.model.fromUser.image && this.$(".avatar").css("background-image", 'url("' + this.model.fromUser.image + '")'), t.UserInfoPopoverView && new t.UserInfoPopoverView({
                    model: this.model,
                    button: this.$(".customer-chat-content-message-author")[0]
                })
            },
            prepareMessage: function(t) {
                if (t = t.replace(i, function(t, e) {
                        return -1 !== t.indexOf("@") ? t : -1 !== t.indexOf("..") ? t : a.createLinkElement(t, (e ? "" : "http://") + t)
                    }), this.settings.get("emots"))
                    for (var e in a.EMOTICONS) t = t.split(e).join(a.createEmotElement(a.EMOTICONS[e]));
                return t
            },
            updateTime: function(t) {
                var s = this.model.getAge(),
                    i = Math.floor(s / 60),
                    a = Math.floor(i / 60),
                    n = Math.floor(a / 24),
                    o = Math.floor(n / 7),
                    r = this.model.get("time"),
                    h = (r.getDate() < 10 ? "0" : "") + r.getDate() + "." + (r.getMonth() + 1 < 10 ? "0" : "") + (r.getMonth() + 1) + "." + r.getFullYear(),
                    l = (r.getHours() < 10 ? "0" : "") + r.getHours() + ":" + (r.getMinutes() < 10 ? "0" : "") + r.getMinutes() + ":" + (r.getSeconds() < 10 ? "0" : "") + r.getSeconds(),
                    d = h + " " + l;
                if (this.options.fullDate) return void this.$time.html(d);
                var c = o > 0 ? d : n > 0 ? n + " " + e.ui.timeDaysAgo : a > 0 ? a + " " + e.ui.timeHoursAgo : i > 0 ? i + " " + e.ui.timeMinutesAgo : Math.max(s - s % 5, 1) + " " + e.ui.timeSecondsAgo;
                if (this.$time.html(c), t) {
                    var u = n > 0 ? -1 : a > 0 ? 60 * (60 - i % 60) * 60 : i > 5 ? 60 * (5 - i % 5) : i > 0 ? 60 : 10 - s % 10;
                    if (-1 == u) return;
                    var m = this;
                    this.timerId = setTimeout(function() {
                        m.updateTime(!0)
                    }, 1e3 * u)
                }
            },
            clean: function() {
                return this.timerId && clearTimeout(this.timerId), this
            }
        }, {
            EMOTICONS: {
                "&gt;:|": e.rootPath + "img/emots/emot-9.png",
                "&gt;:D": e.rootPath + "img/emots/emot-10.png",
                o_O: e.rootPath + "img/emots/emot-11.png",
                ":-D": e.rootPath + "img/emots/emot-18.png",
                ";-D": e.rootPath + "img/emots/emot-19.png",
                "*-D": e.rootPath + "img/emots/emot-20.png",
                ":)": e.rootPath + "img/emots/emot-1.png",
                ";)": e.rootPath + "img/emots/emot-2.png",
                ":(": e.rootPath + "img/emots/emot-3.png",
                ":D": e.rootPath + "img/emots/emot-4.png",
                ":P": e.rootPath + "img/emots/emot-5.png",
                "=)": e.rootPath + "img/emots/emot-6.png",
                ":|": e.rootPath + "img/emots/emot-7.png",
                "=|": e.rootPath + "img/emots/emot-8.png",
                "=O": e.rootPath + "img/emots/emot-12.png",
                "&lt;3": e.rootPath + "img/emots/emot-13.png",
                ":S": e.rootPath + "img/emots/emot-14.png",
                ":*": e.rootPath + "img/emots/emot-15.png",
                ":$": e.rootPath + "img/emots/emot-16.png",
                "=B": e.rootPath + "img/emots/emot-17.png"
            },
            createEmotElement: function(t) {
                return '<img src="' + t + '" />'
            },
            createLinkElement: function(t, e) {
                return t.length > 40, '<a href="' + e + '" target="_blank">' + t + "</a>"
            }
        })
}(window.Application, window.chatConfig, jQuery),
function(t) {
    t.ChatBoxView = Backbone.View.extend({
        initialize: function() {
            this.settings = t.model.settings, this.$wrapper = this.$(".customer-chat-content-messages-wrapper"), this.$el.mCustomScrollbar(), this.messageViews = []
        },
        addMessage: function(e, s, i) {
            var a = new t.MessageView({
                model: e,
                fullDate: this.options.fullDate
            });
            this.messageViews.push(a), this.$wrapper.append(a.el);
            var n = this;
            setTimeout(function() {
                n.updateScroller(), i ? s && n.$el.mCustomScrollbar("scrollTo", "bottom") : (n.settings.get("scroll") || s) && n.$el.mCustomScrollbar("scrollTo", "bottom")
            }, 200)
        },
        clear: function() {
            for (var t = 0; t < this.messageViews.length; t++) this.messageViews[t].remove().clean();
            this.$wrapper.html(""), this.messageViews = []
        },
        updateScroller: function() {
            this.$el.mCustomScrollbar("update")
        }
    })
}(window.Application, jQuery),
function(t, e, s, i) {
    t.TabsView = Backbone.View.extend({
        events: {
            "mousedown .customer-chat-tab": "switchTab",
            "click .customer-chat-tab-prev": "prevButtons",
            "click .customer-chat-tab-next": "nextButtons"
        },
        currentTab: 0,
        prevWinSize: {
            width: 0,
            height: 0
        },
        initialize: function() {
            this.$window = e(window), this.$tabContentContainer = this.$el, this.$container = this.$(".customer-chat-tabs"), this.$buttonsContainer = this.$(".customer-chat-tabs-wrapper"), this.$buttons = this.$(".customer-chat-tab-button"), this.$tabs = this.$el.children(".customer-chat-tab-content"), this.$prev = this.$(".customer-chat-tab-prev"), this.$next = this.$(".customer-chat-tab-next"), this.$el.is(":visible") ? this.render() : (this.$el.show(), this.render(), this.$el.hide()), this.updateOnResize()
        },
        addTab: function(t) {
            var s = e(t.button);
            this.$buttonsContainer.append(s), this.$buttons = this.$buttons.add(s);
            var i = e(t.content);
            return this.$tabs = this.$tabs.add(i), this.$tabContentContainer.append(i), this.render(), i
        },
        removeTab: function(t) {
            var e = this.$buttons.eq(t);
            e.remove(), this.$buttons = this.$buttons.not(e);
            var s = this.$tabs.eq(t);
            s.remove(), this.$tabs = this.$tabs.not(s), this.render()
        },
        removeTabs: function() {
            for (var t = e(), s = e(), i = 0; i < arguments.length; i++) t = t.add(this.$buttons.eq(arguments[i])), s = s.add(this.$tabs.eq(arguments[i]));
            t.remove(), s.remove(), this.$buttons = this.$buttons.not(t), this.$tabs = this.$tabs.not(s), this.render()
        },
        showTab: function(t) {
            t >= this.$tabs.length || 0 > t || (this.currentTab = t, this.$tabs.hide().eq(t).show(), this.$buttons.removeClass("customer-chat-active").eq(t).addClass("customer-chat-active"), this.includeButtonInView(t), this.trigger("tab.show", t))
        },
        getButtonIndex: function(t) {
            return this.$buttons.index(t)
        },
        getButton: function(t) {
            return this.$buttons.eq(t)
        },
        includeButtonInView: function(t) {
            this.$prev.hide(), this.$next.hide();
            var s = i.reduce(this.$buttons, function(t, s) {
                    return t + e(s).outerWidth(!0)
                }, 0),
                a = this.$container.width();
            if (s > a) {
                var n = this.$buttons.eq(t),
                    o = this.$buttonsContainer.position().left,
                    r = n.position().left,
                    h = n.outerWidth(),
                    l = o;
                o + r < this.$prev.outerWidth() ? (l = -r, 0 > l && (l += this.$prev.outerWidth() - 1)) : o + r + h > a - this.$next.outerWidth() && (l = a - (r + h), l + s > a && (l -= this.$next.outerWidth() - 1)), 0 !== l && this.$prev.show(), l + s > a && this.$next.show(), this.$buttonsContainer.css("left", l)
            } else this.$buttonsContainer.css("left", 0)
        },
        switchTab: function(t) {
            var e = this.$buttons.index(t.currentTarget);
            this.showTab(e)
        },
        showTabForButton: function(t) {
            this.switchTab({
                currentTarget: t
            })
        },
        prevButtons: function() {
            var t, e = this.$buttonsContainer.position().left;
            for (t = 0; t < this.$buttons.length; t++) {
                var s = this.$buttons.eq(t),
                    i = s.position();
                if (i.left += e, i.left < 0 && 0 < i.left + s.outerWidth()) break
            }
            this.includeButtonInView(t)
        },
        nextButtons: function() {
            var t, e = this.$buttonsContainer.position().left,
                s = this.$container.width();
            for (t = this.$buttons.length - 1; t >= 0; t--) {
                var i = this.$buttons.eq(t),
                    a = i.position();
                if (a.left += e, a.left < s && s < a.left + i.outerWidth()) break
            }
            this.includeButtonInView(t)
        },
        render: function() {
            var t = Math.max(Math.min(this.currentTab, this.$tabs.length - 1), 0);
            this.showTab(t)
        },
        updateOnResize: function() {
            var t = null,
                s = e.proxy(this.render, this),
                i = this;
            this.$window.resize(function() {
                (i.$window.width() !== i.prevWinSize.width || i.$window.height() !== i.prevWinSize.height) && (i.prevWinSize = {
                    width: i.$window.width(),
                    height: i.$window.height()
                }, t && clearTimeout(t), t = setTimeout(s, 500))
            })
        }
    })
}(window.Application, jQuery, window.chatConfig, _),
function(t, e, s) {
    t.MenuView = Backbone.View.extend({
        events: {
            "mousedown #customer-chat-side-button-chat": "showChat",
            "mousedown #customer-chat-side-button-settings": "showSettings",
            "mousedown #customer-chat-side-button-logs": "showLogs",
            "mousedown #customer-chat-header-menu-widget-snippet": "showWidgetSnippet",
            "mousedown #customer-chat-side-button-widget-snippet": "showWidgetSnippet",
            "click #customer-chat-header-menu-edit": "editProfile",
            "click #customer-chat-header-menu-logs": "showLogs"
        },
        msgBlinking: !1,
        initialize: function(i) {
            this.settings = t.model.settings, this.user = t.model.user, this.chat = t.model.chat, this.operatorsView = i.windowView.operatorsView, this.tabsView = i.windowView.tabsView, this.$window = e(window), this.$menu = this.$(".customer-chat-header-menu"), this.$button = this.$("#customer-chat-button-menu"), this.$avatar = this.$(".customer-chat-content-message-avatar-operator"), this.$editProfile = this.$("#customer-chat-header-menu-edit"), this.$install = this.$("#customer-chat-header-menu-install"), this.$uninstall = this.$("#customer-chat-header-menu-uninstall"), this.$editConfig = this.$("#customer-chat-header-menu-edit-config"), this.$menuLogs = this.$("#customer-chat-header-menu-logs"), this.$widgetSnippet1 = this.$("#customer-chat-header-menu-widget-snippet"), this.$widgetSnippet2 = this.$("#customer-chat-side-button-widget-snippet"), this.$sideMarker = this.$(".customer-chat-side-menu-triangle"), this.$msgIcon = this.$("#customer-chat-side-button-chat i"), this.$sideLogs = this.$("#customer-chat-side-button-logs"), this.$chat = this.$("#customer-chat-admin-chat"), this.$settings = this.$("#customer-chat-admin-settings"), this.$logs = this.$("#customer-chat-admin-logs"), this.user.hasRole("ADMIN") ? (s.ui.installed ? this.$install.hide() : this.$uninstall.hide(), this.$editProfile.hide()) : (this.$install.hide(), this.$uninstall.hide(), this.$editConfig.hide(), this.$menuLogs.hide(), this.$sideLogs.hide(), this.$widgetSnippet1.hide(), this.$widgetSnippet2.hide()), this.hide(), this.user.hasRole("OPERATOR") && (this.listenTo(i.windowView.chatTabView, "talks.read", this.stopAnimateMsgIcon), this.listenTo(i.windowView.chatTabView, "talks.unread", this.animateMsgIcon)), this.listenTo(this.user, "change", this.updateUser), this.updateUser()
        },
        updateUser: function() {
            this.$button.find(".customer-chat-header-button-text").html("Welcome, " + this.user.getReadableName()), this.user.get("image") && this.$avatar.css("background-image", 'url("' + this.user.get("image") + '")')
        },
        blinkMsgIcon: function() {
            if (this.msgBlinking) {
                var t = this;
                this.$msgIcon.fadeOut("slow", function() {
                    t.$msgIcon.fadeIn("slow", function() {
                        t.blinkMsgIcon()
                    })
                })
            }
        },
        animateMsgIcon: function() {
            this.msgBlinking = !0, this.blinkMsgIcon()
        },
        stopAnimateMsgIcon: function() {
            this.msgBlinking = !1
        },
        show: function(t) {
            this.$menu.fadeIn("fast"), t.stopImmediatePropagation(), e("html, body").one("mousedown", e.proxy(this.hide, this))
        },
        hide: function() {
            this.$menu.fadeOut("fast"), this.$button.one("mousedown", e.proxy(this.show, this))
        },
        showChat: function(s) {
            var i = 18 + s.currentTarget.offsetTop;
            this.$sideMarker.animate({
                top: i
            }, "fast"), this.$chat.show(), this.$settings.hide(), this.$logs.hide(), e(window).resize(), t.trigger("menu:show:chat")
        },
        showSettings: function(e) {
            var s = 18 + (e ? e.currentTarget : this.$("#customer-chat-side-button-settings")[0]).offsetTop;
            this.$sideMarker.animate({
                top: s
            }, "fast"), this.$chat.hide(), this.$settings.show(), this.$logs.hide(), this.tabsView.render(), this.$("#customer-chat-admin-settings .customer-chat-content-messages").mCustomScrollbar("update"), t.trigger("menu:show:settings")
        },
        showLogs: function() {
            var e = 18 + this.$sideLogs[0].offsetTop;
            this.$sideMarker.animate({
                top: e
            }, "fast"), this.$chat.hide(), this.$settings.hide(), this.$logs.show(), this.$("#customer-chat-admin-logs .customer-chat-content-messages").mCustomScrollbar("update"), t.trigger("menu:show:logs")
        },
        editProfile: function() {
            var t = this.$("#customer-chat-side-button-settings")[0];
            this.showSettings({
                currentTarget: t
            }), this.chat.operatorsReady ? this._editProfile() : this.listenToOnce(this.chat, "change:operators", function() {
                this._editProfile()
            })
        },
        _editProfile: function() {
            this.operatorsView.showEdit(null, this.user.get("id")), this.tabsView.showTab(this.user.hasRole("OPERATOR") ? 0 : 1)
        },
        showWidgetSnippet: function() {
            var e = '<code>&lt;script type="text/javascript" src="' + s.widgetInitPath + '"&gt;&lt;/script&gt;</code>';
            t.view.dialogs.message("Widget embedding code", e)
        }
    })
}(window.Application, jQuery, window.chatConfig),
function(t, e) {
    t.ChatTabView = Backbone.View.extend({
        events: {
            "click .customer-chat-tab-button .close": "closeTalk",
            "click .customer-chat-history-item": "showTalk"
        },
        talks: {},
        unreadTalks: 0,
        initialize: function() {
            this.settings = t.model.settings, this.chat = t.model.chat, this.user = t.model.user, this.tabsView = new t.TabsView({
                el: this.$(".chat-wrapper")
            }), this.chatBox = new t.ChatBoxView({
                el: this.$(".customer-chat-content-messages")
            }), this.$emoticons = this.$(".customer-chat-emots-menu"), this.$input = this.$(".customer-chat-content-message-input-field"), this.$onlineList = this.$("#customer-chat-users-online .customer-chat-content-messages-wrapper.users"), this.$onlineListOperator = this.$("#customer-chat-users-online .customer-chat-content-messages-wrapper.operators"), this.user.hasRole("ADMIN") && (this.tabsView.remove(), this.$("#customer-chat-users-online").addClass("admin")), this.listenTo(this.chat, "users:online", this.renderOnlineUsers), this.listenTo(this.chat, "messages:new", this.handleNewMessages), this.listenTo(this.tabsView, "tab.show", function() {
                e(window).resize()
            }), this.listenTo(this.tabsView, "tab.show", this.handleTalkShown), this.listenTo(t, "menu:show:chat", this.handleChatShown)
        },
        renderOnlineUsers: function(s) {
            this.$onlineList.html(""), this.$onlineListOperator.html("");
            for (var i = 0; i < s.length; i++) {
                var a = s[i],
                    n = new t.UserModel(a),
                    o = e(t.template.historyListItem);
                o.data("info", n), o.find(".customer-chat-history-item-username").html(n.getReadableName()), -1 !== a.roles.indexOf("OPERATOR") ? this.$onlineListOperator.append(o) : this.$onlineList.append(o), new t.UserInfoPopoverView({
                    model: n,
                    button: o[0]
                });
                var r = this.getTalkWith(n);
                r && r.chatView.model.set(n.attributes)
            }
            e(window).trigger("resize")
        },
        addTalk: function(s) {
            var i = e(t.template.tabButtonChat);
            i.find("span").html(s.user.getReadableName()), i.data("user", s.user);
            var a = i.find(".new-msg");
            a.hide(),
                function h() {
                    a.animate({
                        opacity: .01
                    }, {
                        duration: "slow",
                        complete: function() {
                            a.animate({
                                opacity: 1
                            }, {
                                duration: "slow",
                                complete: h
                            })
                        }
                    })
                }();
            var n = e(t.template.tabContentChat),
                o = new t.ChatView({
                    el: n,
                    model: s.user
                });
            this.tabsView.addTab({
                button: i,
                content: n
            });
            var r = {
                chatView: o,
                $button: i
            };
            return this.talks[s.user.get("id")] = r, this.listenTo(o, "message.sent", this.handleMessageSent), r
        },
        removeTalkWith: function(t) {
            var e = this.talks[t.get("id")];
            this.tabsView.removeTab(this.tabsView.getButtonIndex(e.$button[0])), e.chatView.remove(), delete this.talks[t.get("id")]
        },
        hasTalkWith: function(t) {
            return !!this.talks[t.get("id")]
        },
        getTalkWith: function(t) {
            return this.talks[t.get("id")]
        },
        showTalk: function(s) {
            var i = e(s.currentTarget).data("info");
            if (this.user.hasRole("ADMIN")) return void t.trigger("history.search", {
                name: i.get("name"),
                mail: i.get("mail"),
                fromDate: "",
                toDate: ""
            });
            var a = this.getTalkWith(i);
            a || (a = this.addTalk({
                user: i
            }), this.chat.getLastMessages(i.get("id"), null, function(t) {
                t.length > 0 && a.chatView.handleNewMessages(t, !0)
            })), this.tabsView.showTabForButton(a.$button[0])
        },
        closeTalk: function(t) {
            var s = e(t.currentTarget).parent(".customer-chat-tab-button").data("user");
            this.removeTalkWith(s), t.stopImmediatePropagation()
        },
        handleNewMessages: function(e) {
            var s = _.groupBy(e, "from_id");
            _.each(s, function(e) {
                var s = new t.UserModel(e[0].from_user_info),
                    i = this.getTalkWith(s);
                if (i) this.initTalk(i, e);
                else {
                    i = this.addTalk({
                        user: s
                    });
                    var a = e[0],
                        n = this;
                    this.chat.getLastMessages(s.get("id"), a.id, function(t) {
                        t.length > 0 && i.chatView.handleNewMessages(t, !0), n.initTalk(i, e)
                    })
                }
            }, this)
        },
        initTalk: function(t, e) {
            t.chatView.handleNewMessages(e);
            var s = t.$button.find(".new-msg");
            s.is(":hidden") && (s.show(), this.updateUnreadCounter(1))
        },
        handleMessageSent: function(e) {
            var s = this.getTalkWith(new t.UserModel({
                    id: e.get("to")
                })),
                i = s.$button.find(".new-msg");
            i.is(":visible") && (i.hide(), this.updateUnreadCounter(-1))
        },
        handleTalkShown: function(t) {
            var e = this.tabsView.getButton(t).find(".new-msg");
            e.is(":visible") && (e.hide(), this.updateUnreadCounter(-1))
        },
        handleChatShown: function() {
            this.tabsView.render()
        },
        updateUnreadCounter: function(t) {
            var e = this.unreadTalks;
            this.unreadTalks = Math.max(0, this.unreadTalks + t), this.trigger(1 === e && 0 === this.unreadTalks ? "talks.read" : "talks.unread")
        }
    })
}(window.Application, jQuery, window.chatConfig),
function(t, e, s, i) {
    var a = t.ChatView = Backbone.View.extend({
        events: {
            "click .customer-chat-content-message-emots-button": "toggleEmoticons",
            "click .customer-chat-emoticon": "addEmoticon",
            "click .btn-canned-msg": "selectCannedMessage",
            "keydown .customer-chat-content-message-input-field": "sendMessage"
        },
        guestUrl: "",
        typingInfoBlinking: !1,
        initialize: function() {
            this.settings = t.model.settings, this.chat = t.model.chat, this.user = t.model.user, this.chatBox = new t.ChatBoxView({
                el: this.$(".customer-chat-content-messages")
            }), this.$currentUrl = this.$(".current-url"), this.$emoticons = this.$(".customer-chat-emots-menu"), this.$typingInfo = this.$(".typing-indicator"), this.$input = this.$(".customer-chat-content-message-input-field"), this.model.hasRole("OPERATOR") && this.$el.addClass("operator"), this.listenTo(this.chat, "messages:sent", this.handleMessageSent), this.listenTo(this.model, "change", this.handleModelUpdate), this.handleModelUpdate(), this.listenTo(this.chat, "users:typing", this.handleRemoteTyping)
        },
        toggleEmoticons: function() {
            this.$emoticons.toggle("fade", "fast")
        },
        addEmoticon: function(t) {
            var s = e(t.currentTarget);
            this.$input.val(this.$input.val() + " " + s.data("emot") + " "), this.$input.focus(), this.$emoticons.fadeOut("fast")
        },
        sendMessage: function(e) {
            if (this.handleTyping(), 13 === e.keyCode && !e.shiftKey) {
                var s = this.$input.val();
                if (0 != s.length) {
                    var i = new t.MessageModel({
                        author: this.user.get("name"),
                        mail: this.user.get("mail"),
                        authorType: "operator",
                        body: s,
                        time: new Date,
                        to: this.model.get("id")
                    }, {
                        localMessage: !0
                    });
                    i.fromUser = this.user.attributes, this.chat.sendMessage(i), this.chatBox.addMessage(i, !0), this.$input.val(""), this.trigger("message.sent", i)
                }
            }
        },
        handleMessageSent: function(e, s) {
            if (e === this.model.get("id") && -2 === s.to_id) {
                s.from_user_info.image = "no_image.jpg";
                var i = new t.MessageModel({
                    author: "[system message]",
                    body: "Another operator is already helping this guest, your messages will not be delivered.",
                    datetime: new Date,
                    image: "#",
                    from_user_info: s.from_user_info
                });
                this.chatBox.addMessage(i, !0)
            }
        },
        handleNewMessages: function(e, s) {
            i.each(e, this.handleMessage, this), !s && e.length > 0 && this.settings.get("sound") && t.service.soundPlayer.play("message")
        },
        handleMessage: function(e) {
            e.info = this.model.get("info");
            var s = new t.MessageModel(e);
            this.chatBox.addMessage(s)
        },
        handleTyping: function() {
            this.chat.updateTypingStatus(this.model.get("id"))
        },
        handleRemoteTyping: function(t) {
            -1 !== t.indexOf(this.model.get("id")) && (this.startTypingInfoBlink(), this.stopTypingBlinkTimer && clearTimeout(this.stopTypingBlinkTimer), this.stopTypingBlinkTimer = setTimeout(e.proxy(this.stopTypingInfoBlink, this), a.TYPING_STATUS_TIME))
        },
        handleModelUpdate: function() {
            var t = this.model.get("info");
            if (t && this.guestUrl !== t.referer) {
                this.guestUrl = t.referer;
                var s = this;
                this.$currentUrl.parent().animate({
                    opacity: 0
                }, {
                    duration: "slow",
                    complete: function() {
                        s.$currentUrl.html(t.referer).attr("href", t.referer), e(this).animate({
                            opacity: 1
                        }, {
                            duration: "slow"
                        })
                    }
                })
            }
        },
        startTypingInfoBlink: function() {
            this.typingInfoBlinking || (this.typingInfoBlinking = !0, this.blinkTypingInfo())
        },
        blinkTypingInfo: function() {
            if (this.typingInfoBlinking) {
                var t = this;
                this.$typingInfo.fadeIn("slow", function() {
                    t.$typingInfo.fadeOut("slow", function() {
                        t.blinkTypingInfo()
                    })
                })
            }
        },
        stopTypingInfoBlink: function() {
            this.typingInfoBlinking = !1
        },
        selectCannedMessage: function() {
            var s = this,
                i = new t.SelectCannedMessageView({
                    model: t.model.cannedMessages
                });
            t.view.dialogs.confirm("Select message", i, {
                Insert: function() {
                    var t = e(this),
                        a = i.selected;
                    if (t.dialog("close"), a) {
                        var n = s.$input.val();
                        s.$input.val(n + (n.length > 0 ? " " : "") + a).focus()
                    }
                }
            }, "auto")
        }
    }, {
        TYPING_STATUS_TIME: 2e3
    })
}(window.Application, jQuery, window.chatConfig, _),
function(t, e) {
    t.SettingsView = Backbone.View.extend({
        mailExp: new RegExp("^[-+\\.0-9=a-z_]+@([-0-9a-z]+\\.)+([0-9a-z]){2,}$", "i"),
        colorExp: new RegExp("^#(([0-9a-fA-F]{3})|([0-9a-fA-F]{6}))$"),
        events: {
            "click #customer-chat-ui-save": "save",
            "click #customer-chat-ui-reset": "reset",
            "change #inputMsgSound": "playSound"
        },
        errors: !1,
        inputs: null,
        syncing: !1,
        initialize: function() {
            this.model = t.model.uiSettings, this.$inputs = this.$("*[name]"), this.$msgSound = this.$("#inputMsgSound"), this.$save = this.$("#customer-chat-ui-save"), this.$loading = this.$(".customer-chat-content-loading-icon").hide(), this.$inputs.blur(e.proxy(this.validate, this)), this.initColorPickers(), this.soundPlayer = t.service.soundPlayer;
            var s = this;
            this.$msgSound.find("option").each(function() {
                var t = {};
                t[this.value] = this.value, s.soundPlayer.addSounds(t)
            }), this.model.on("change", this.render, this), this.model.on("request", this.disable, this), this.model.on("sync", this.enable, this), this.render()
        },
        validate: function(s, i) {
            this.errors = !1;
            var a = this;
            this.$inputs.each(function() {
                var t = e(this);
                switch (t.removeClass("customer-chat-input-error"), t.data("validator")) {
                    case "color":
                        0 != t.val().length && a.colorExp.test(t.val()) || (t.addClass("customer-chat-input-error"), a.errors = !0);
                        break;
                    case "mail":
                        0 != t.val().length && a.mailExp.test(t.val()) || (t.addClass("customer-chat-input-error"), a.errors = !0);
                        break;
                    case "number":
                        /^[\d]+$/.test(t.val()) && parseInt(t.val()) >= 0 || (t.addClass("customer-chat-input-error"), a.errors = !0)
                }
            }), i && this.errors && t.view.dialogs.message("Form error", "Some settings are invalid")
        },
        isValid: function() {
            return this.validate(null, !0), !this.errors
        },
        save: function() {
            if (this.isValid()) {
                var t = {};
                this.$inputs.each(function() {
                    var s = e(this);
                    t[s.attr("name")] = "checkbox" == s.attr("type") ? s.is(":checked") ? "true" : "false" : s.val()
                }), this.syncing || this.model.save(t)
            }
        },
        reset: function() {
            var s = this;
            t.view.dialogs.confirm("Reset settings", "Are you sure you want to reset all the settings?", {
                Reset: function() {
                    s._reset(), e(this).dialog("close")
                }
            })
        },
        _reset: function() {
            this.model.reset()
        },
        render: function() {
            var t = this;
            this.$inputs.each(function() {
                var s = e(this);
                "checkbox" == s.attr("type") ? "true" == t.model.get(s.attr("name")) ? s.attr("checked", "checked") : s.removeAttr("checked") : s.val(t.model.get(s.attr("name")))
            }), this.validate()
        },
        disable: function() {
            this.syncing = !0, this.$save.addClass("button-disabled"), this.$loading.fadeIn()
        },
        enable: function() {
            var t = this;
            setTimeout(function() {
                t.$save.removeClass("button-disabled"), t.$loading.fadeOut(), t.syncing = !1
            }, 500)
        },
        initColorPickers: function() {
            e(".color-input").each(function() {
                var t = e(this);
                t.ColorPicker({
                    onSubmit: function(e, s) {
                        t.val("#" + s), t.ColorPickerHide()
                    },
                    onChange: function(e, s) {
                        t.val("#" + s), t.blur()
                    },
                    onBeforeShow: function() {
                        t.ColorPickerSetColor(this.value)
                    }
                }).bind("keyup", function() {
                    t.ColorPickerSetColor(this.value)
                })
            })
        },
        playSound: function() {
            this.soundPlayer.play(this.$msgSound.val())
        }
    })
}(window.Application, jQuery),
function(t, e) {
    t.LogsView = Backbone.View.extend({
        events: {
            "click #customer-chat-logs-refresh": "refresh",
            "click #customer-chat-logs-clear": "clear"
        },
        syncing: !1,
        initialize: function() {
            this.model = t.model.logs, this.$scroller = this.$(".customer-chat-content-messages"), this.$wrapper = this.$(".customer-chat-content-messages-wrapper"), this.$refresh = this.$("#customer-chat-logs-refresh"), this.$clear = this.$("#customer-chat-logs-clear"), this.$loading = this.$(".customer-chat-content-loading-icon").hide(), this.$scroller.bind("show", function() {
                e(window).trigger("resize")
            }).mCustomScrollbar();
            var s = this;
            this.$scroller.bind("show", function() {
                s.init()
            }), this.$scroller.bind("hide", function() {
                s.clean()
            }), this.model.on("change", this.render, this), this.model.on("request", this.disable, this), this.model.on("sync", this.enable, this)
        },
        render: function() {
            this.$wrapper.html("<pre>" + this.model.get("content") + "</pre>");
            var t = this;
            setTimeout(function() {
                t.$scroller.mCustomScrollbar("update"), t.$scroller.mCustomScrollbar("scrollTo", "bottom")
            }, 200)
        },
        disable: function() {
            this.syncing = !0, this.$refresh.addClass("button-disabled"), this.$clear.addClass("button-disabled"), this.$loading.fadeIn()
        },
        enable: function() {
            var t = this;
            setTimeout(function() {
                t.$refresh.removeClass("button-disabled"), t.$clear.removeClass("button-disabled"), t.$loading.fadeOut(), t.syncing = !1
            }, 500)
        },
        init: function() {
            if (this.model.has("content")) {
                var t = this;
                setTimeout(function() {
                    t.render()
                }, 200)
            } else this.model.fetch()
        },
        refresh: function() {
            this.syncing || this.model.fetch()
        },
        clean: function() {
            this.$wrapper.html("")
        },
        clear: function() {
            if (!this.syncing) {
                var s = this;
                t.view.dialogs.confirm("Clear logs", "Are you sure you want to clear all of the logs?", {
                    Clear: function() {
                        s._clear(), e(this).dialog("close")
                    }
                })
            }
        },
        _clear: function() {
            this.model.clear(e.proxy(this.onClear, this.onClearError))
        },
        onClear: function() {
            t.view.dialogs.message("Clear logs", "All logs cleared")
        },
        onClearError: function() {
            t.view.dialogs.message("Clear logs", "Error clearing the logs")
        }
    })
}(window.Application, jQuery),
function(t, e, s) {
    t.WidgetThemeView = Backbone.View.extend({
        events: {
            "click  #customer-chat-widget-theme-save": "save",
            "change #inputWidgetTheme": "updatePreview"
        },
        inputs: null,
        syncing: !1,
        initialize: function() {
            this.model = t.model.uiSettings, this.$inputs = this.$("*[name]"), this.$widgetTheme = this.$("#inputWidgetTheme"), this.$preview = this.$("#widget-theme-preview"), this.$save = this.$("#customer-chat-widget-theme-save"), this.$loading = this.$(".customer-chat-content-loading-icon").hide(), this.$inputs.blur(s.proxy(this.validate, this)), this.model.on("change", this.render, this), this.model.on("request", this.disable, this), this.model.on("sync", this.enable, this), this.render()
        },
        save: function() {
            var t = {};
            this.$inputs.each(function() {
                var e = s(this);
                t[e.attr("name")] = "checkbox" == e.attr("type") ? e.is(":checked") ? "true" : "false" : e.val()
            }), this.syncing || (this.model.save(t), this.model.once("sync", s.proxy(this.onSave, this)))
        },
        onSave: function() {
            this.model.fetch()
        },
        render: function() {
            var t = this;
            this.$inputs.each(function() {
                var e = s(this);
                "checkbox" == e.attr("type") ? e.attr("checked", "true" == t.model.get(e.attr("name"))) : e.val(t.model.get(e.attr("name")))
            }), this.updatePreview()
        },
        updatePreview: function() {
            var t = this.$widgetTheme.val();
            if (t) {
                var s = e.rootPath + t + "/preview.png";
                this.$preview.attr("src", s)
            }
        },
        disable: function() {
            this.syncing = !0, this.$save.addClass("button-disabled"), this.$loading.fadeIn()
        },
        enable: function() {
            var t = this;
            setTimeout(function() {
                t.$save.removeClass("button-disabled"), t.$loading.fadeOut(), t.syncing = !1
            }, 500)
        }
    })
}(window.Application, window.chatConfig, jQuery),
function(t, e, s, i) {
    t.OperatorsView = Backbone.View.extend({
        mailExp: new RegExp("^[-+\\.0-9=a-z_]+@([-0-9a-z]+\\.)+([0-9a-z]){2,}$", "i"),
        events: {
            "click #customer-chat-operators-back": "showList",
            "click #customer-chat-operators-add": "showAdd",
            "click #customer-chat-operators-change-password": "showChangePassword",
            "click #customer-chat-operators-cancel": "showEdit",
            "click .customer-chat-operators-edit": "showEdit",
            "click .customer-chat-operators-remove": "deleteOperator",
            "click #avatar-from-collection": "selectAvatar",
            "click #customer-chat-operators-save": "save"
        },
        initialize: function() {
            this.model = t.model.chat, this.user = t.model.user, this.$list = this.$("#customer-chat-operators-list"), this.$operators = this.$list.find(".customer-chat-content-messages-wrapper"), this.$edit = this.$("#customer-chat-operators-edit"), this.$save = this.$("#customer-chat-operators-save"), this.$back = this.$("#customer-chat-operators-back"), this.$editInputs = this.$edit.find("input"), this.$avatarInput = this.$edit.find("#avatarUploadField"), this.$loading = this.$(".customer-chat-content-loading-icon").hide(), this.user.hasRole("OPERATOR") && (this.$back.remove(), this.listenToOnce(this.model, "change:operators", function() {
                this.showEdit(null, this.user.get("id"))
            })), this.$editInputs.blur(e.proxy(this.validateEdit, this)), this.model.on("change:operators", this.render, this), this.showList(), this.render(), this.model.loadOperators()
        },
        render: function() {
            this.$operators.html("");
            var i = this;
            s.each(this.model.getOperators(), function(s) {
                var a = e(t.template.operatorItem);
                s.image && i.setEditAvatarIcon(a, s.image), a.find(".customer-chat-operator-name").html(s.name), a.find(".customer-chat-operator-mail").html(s.mail), a.find(".customer-chat-operators-edit").data("id", s.id), a.find(".customer-chat-operators-remove").data("id", s.id), i.$operators.append(a)
            })
        },
        setEditAvatarIcon: function(t, e) {
            t.find(".avatar").css("background-image", 'url("' + e + '")')
        },
        showList: function() {
            this.state = "list", this.$edit.hide(), this.$list.show(), this.enable()
        },
        showEdit: function(s, a) {
            var n = this,
                o = this.state;
            this.state = "edit", this.$edit.find(".add-only, .pass-only").hide(), this.$edit.find(".edit-only").show(), this.$edit.find(".customer-chat-input-error").removeClass("customer-chat-input-error");
            var r, h, l = s ? e(s.currentTarget) : null;
            "pass" !== o ? (r = l ? l.data("id") : a, h = t.model.selectedOperator = t.model.chat.getOperator(r)) : (h = t.model.selectedOperator, r = h.id), this.$edit.find(".customer-chat-tabs-header").html(this.user.get("id") === a ? "Edit profile" : "Edit operator"), h && (this.$edit.find("#usernameField").val(h.name), this.$edit.find("#mailField").val(h.mail), h.image && n.setEditAvatarIcon(this.$edit, h.image));
            var d = t.view.dialogs;
            this.$avatarInput.ajaxfileupload({
                action: i.uploadAvatarPath,
                params: {
                    userId: r
                },
                onStart: function() {
                    d.message("Uploading", "Uploading image, please wait...")
                },
                onComplete: function(t) {
                    d.message("Avatar uploaded", "Uploaded successfully"), h.image = t.image, n.model.saveOperator(h), n.setEditAvatarIcon(n.$edit, h.image)
                }
            }), this.$list.hide(), this.$edit.show()
        },
        deleteOperator: function(s) {
            var i = e(s.currentTarget),
                a = t.model.chat.getOperator(i.data("id")),
                n = this,
                o = {};
            o['Remove "%user%"'.replace("%user%", a.name)] = function() {
                n.model.deleteOperator(a), e(this).dialog("close"), e(window).trigger("resize")
            }, t.view.dialogs.confirm('Remove "%user%"?'.replace("%user%", a.name), "Are you sure you want to permanently delete this user?", o)
        },
        showAdd: function() {
            this.state = "add", this.$edit.find(".customer-chat-tabs-header").html("Add new operator"), this.$edit.find(".edit-only, .pass-only").hide(), this.$edit.find(".add-only").show(), this.$edit.find(".customer-chat-input-error").removeClass("customer-chat-input-error"), t.model.selectedOperator = {
                roles: ["OPERATOR"]
            }, this.$edit.find("#usernameField").val(""), this.$edit.find("#mailField").val(""), this.$edit.find("#passField").val(""), this.$edit.find("#rePassField").val(""), this.$list.hide(), this.$edit.show()
        },
        showChangePassword: function() {
            this.state = "pass", this.$edit.find(".customer-chat-tabs-header").html("Change password"), this.$edit.find(".edit-only, .add-only").hide(), this.$edit.find(".pass-only").show(), this.user.hasRole("ADMIN") && this.$edit.find(".current-pass").hide(), this.$edit.find(".customer-chat-input-error").removeClass("customer-chat-input-error"), this.$edit.find("#changePassCurrentField").val(""), this.$edit.find("#changePassField").val(""), this.$edit.find("#changePassRetypeField").val(""), this.$list.hide(), this.$edit.show()
        },
        selectAvatar: function() {
            var s = this,
                a = new t.SelectAvatarView({
                    model: i.defaultAvatars
                });
            t.view.dialogs.confirm("Select avatar", a, {
                OK: function() {
                    var i = e(this),
                        n = a.selected;
                    if (i.dialog("close"), n) {
                        var o = t.model.selectedOperator;
                        o.image = n, s.model.saveOperator(o), s.setEditAvatarIcon(s.$edit, o.image)
                    }
                }
            })
        },
        save: function() {
            if (this.isEditValid() && !this.syncing) {
                this.disable();
                var e = t.model.selectedOperator;
                if (e) {
                    "edit" == this.state || "add" == this.state ? (e.name = this.$edit.find("#usernameField").val(), e.mail = this.$edit.find("#mailField").val(), e.password = this.$edit.find("#passField").val()) : "pass" == this.state && (e.currPassword = this.$edit.find("#changePassCurrentField").val(), e.password = this.$edit.find("#changePassField").val());
                    var i = this;
                    t.model.chat.once("operator:saved", function() {
                        i.enable(), i.user.hasRole("ADMIN") ? i.showList() : i.showEdit()
                    }), t.model.chat.once("operator:saveError", function(e) {
                        i.enable(), t.view.dialogs.formError("Form error", s.values(e))
                    }), t.model.chat.saveOperator(e)
                } else this.enable()
            }
        },
        disable: function() {
            this.syncing = !0, this.$save.addClass("button-disabled"), this.$loading.fadeIn()
        },
        enable: function() {
            var t = this;
            setTimeout(function() {
                t.$save.removeClass("button-disabled"), t.$loading.fadeOut(), t.syncing = !1, "add" == t.state && t.showList()
            }, 500)
        },
        validateEdit: function(s, i) {
            function a(t, e) {
                if (t.addClass("customer-chat-input-error"), t.data("validator-msg") !== !1) {
                    var s = t.data("validator-label");
                    s && (e = s + ": " + e), n.errors.push(e)
                } else n.errors.push(!1)
            }
            this.errors = !1;
            var n = this,
                o = i ? this.$editInputs : e(s.target);
            if (!i) {
                var r = e(s.target).data("validator-match");
                r && (o = o.add(n.$el.find("#" + r)))
            }
            n.errors = [], o.each(function() {
                var t = e(this),
                    s = t.data("validator-state"),
                    i = t.data("validator-state-ex");
                if (!(s && s !== n.state || i && i === n.state)) {
                    switch (t.removeClass("customer-chat-input-error"), t.data("validator")) {
                        case "mail":
                            0 != t.val().length && n.mailExp.test(t.val()) || a(t, "Enter valid e-mail address");
                            break;
                        case "notEmpty":
                            0 == t.val().length && a(t, "Value cannot be empty");
                            break;
                        case "password":
                            t.val().length < 6 && a(t, "Password has to be at least 6 characters long")
                    }
                    var o = t.data("validator-match");
                    if (o) {
                        var r = n.$el.find("#" + o);
                        t.val() !== r.val() && a(t, "Passwords have to match")
                    }
                }
            }), i && this.errors.length > 0 && t.view.dialogs.formError("Form error", this.errors)
        },
        isEditValid: function() {
            return this.validateEdit(null, !0), 0 === this.errors.length
        }
    })
}(window.Application, jQuery, _, window.chatConfig),
function(t, e, s) {
    t.CannedMessagesView = Backbone.View.extend({
        events: {
            "click #customer-chat-canned-messages-back": "showList",
            "click #customer-chat-canned-messages-add": "showAdd",
            "click .customer-chat-canned-messages-edit": "showEdit",
            "click .customer-chat-canned-messages-remove": "deleteMessage",
            "click #customer-chat-canned-messages-save": "save"
        },
        initialize: function() {
            this.model = t.model.cannedMessages, this.user = t.model.user, this.$list = this.$("#customer-chat-canned-messages-list"), this.$messages = this.$list.find(".customer-chat-content-messages-wrapper"), this.$edit = this.$("#customer-chat-canned-messages-edit"), this.$save = this.$("#customer-chat-canned-messages-save"), this.$back = this.$("#customer-chat-canned-messages-back"), this.$editInputs = this.$edit.find("input"), this.$loading = this.$(".customer-chat-content-loading-icon").hide(), this.$editInputs.blur(e.proxy(this.validateEdit, this)), this.model.on("change:messages", this.render, this), this.showList(), this.render()
        },
        render: function() {
            this.$messages.html("");
            var i = this;
            s.each(this.model.get("messages"), function(s) {
                var a = e(t.template.cannedMessageItem);
                a.find(".customer-chat-canned-message-name").html(s.name), a.find(".customer-chat-canned-message-body").html(s.body), a.find(".customer-chat-canned-messages-edit").data("id", s.id), a.find(".customer-chat-canned-messages-remove").data("id", s.id), i.$messages.append(a)
            })
        },
        showList: function() {
            this.state = "list", this.$edit.hide(), this.$list.show(), this.enable()
        },
        showEdit: function(s, i) {
            this.state;
            this.state = "edit", this.$edit.find(".add-only").hide(), this.$edit.find(".edit-only").show(), this.$edit.find(".customer-chat-input-error").removeClass("customer-chat-input-error");
            var a, n, o = s ? e(s.currentTarget) : null;
            a = o ? o.data("id") : i, n = t.model.selectedMessage = this.model.getById(a), n && (this.$edit.find("#messageNameField").val(n.name), this.$edit.find("#messageBodyField").val(n.body)), this.$list.hide(), this.$edit.show()
        },
        deleteMessage: function(s) {
            var i = e(s.currentTarget),
                a = this.model.getById(i.data("id")),
                n = this,
                o = {};
            o['Remove "%message%"'.replace("%message%", a.name)] = function() {
                n.model.deleteMessage(a.id), e(this).dialog("close"), e(window).trigger("resize")
            }, t.view.dialogs.confirm('Remove "%message%"?'.replace("%message%", a.name), "Are you sure you want to permanently delete this message?", o)
        },
        showAdd: function() {
            this.state = "add", this.$edit.find(".customer-chat-tabs-header").html("Add new message"), this.$edit.find(".edit-only, .pass-only").hide(), this.$edit.find(".add-only").show(), this.$edit.find(".customer-chat-input-error").removeClass("customer-chat-input-error"), t.model.selectedMessage = {}, this.$edit.find("#messageNameField").val(""), this.$edit.find("#messageBodyField").val(""), this.$list.hide(), this.$edit.show()
        },
        showChangePassword: function() {
            this.state = "pass", this.$edit.find(".customer-chat-tabs-header").html("Change password"), this.$edit.find(".edit-only, .add-only").hide(), this.$edit.find(".pass-only").show(), this.user.hasRole("ADMIN") && this.$edit.find(".current-pass").hide(), this.$edit.find(".customer-chat-input-error").removeClass("customer-chat-input-error"), this.$edit.find("#changePassCurrentField").val(""), this.$edit.find("#changePassField").val(""), this.$edit.find("#changePassRetypeField").val(""), this.$list.hide(), this.$edit.show()
        },
        save: function() {
            if (this.isEditValid() && !this.syncing) {
                this.disable();
                var e = t.model.selectedMessage;
                if (e) {
                    e.name = this.$edit.find("#messageNameField").val(), e.body = this.$edit.find("#messageBodyField").val();
                    var i = this;
                    this.model.once("message:saved", function() {
                        i.enable(), i.showList()
                    }), this.model.once("message:saveError", function(e) {
                        i.enable(), t.view.dialogs.formError("Form error", s.values(e))
                    }), this.model.saveMessage(e)
                } else this.enable()
            }
        },
        disable: function() {
            this.syncing = !0, this.$save.addClass("button-disabled"), this.$loading.fadeIn()
        },
        enable: function() {
            var t = this;
            setTimeout(function() {
                t.$save.removeClass("button-disabled"), t.$loading.fadeOut(), t.syncing = !1, "add" == t.state && t.showList()
            }, 500)
        },
        validateEdit: function(s, i) {
            function a(t, e) {
                if (t.addClass("customer-chat-input-error"), t.data("validator-msg") !== !1) {
                    var s = t.data("validator-label");
                    s && (e = s + ": " + e), n.errors.push(e)
                } else n.errors.push(!1)
            }
            this.errors = !1;
            var n = this,
                o = i ? this.$editInputs : e(s.target);
            if (!i) {
                var r = e(s.target).data("validator-match");
                r && (o = o.add(n.$el.find("#" + r)))
            }
            n.errors = [], o.each(function() {
                var t = e(this),
                    s = t.data("validator-state"),
                    i = t.data("validator-state-ex");
                if (!(s && s !== n.state || i && i === n.state)) {
                    switch (t.removeClass("customer-chat-input-error"), t.data("validator")) {
                        case "notEmpty":
                            0 == t.val().length && a(t, "Value cannot be empty")
                    }
                    var o = t.data("validator-match");
                    if (o) {
                        var r = n.$el.find("#" + o);
                        t.val() !== r.val() && a(t, "Passwords have to match")
                    }
                }
            }), i && this.errors.length > 0 && t.view.dialogs.formError("Form error", this.errors)
        },
        isEditValid: function() {
            return this.validateEdit(null, !0), 0 === this.errors.length
        }
    })
}(window.Application, jQuery, _, window.chatConfig),
function(t, e, s) {
    t.SelectAvatarView = Backbone.View.extend({
        events: {
            "mousedown .customer-chat-content-message-avatar": "selectAvatar"
        },
        render: function() {
            this.$el.html(t.template.selectAvatarContent), this.$avatars = this.$(".avatars");
            for (var e = 0; e < this.model.length; e++) {
                var i = s('<i class="customer-chat-content-message-avatar"></i>');
                i.css("background-image", 'url("' + this.model[e] + '")').data("image", this.model[e]), this.$avatars.append(i)
            }
            return this.$el.find(".avatars-wrapper").mCustomScrollbar(), s(window).resize(), this
        },
        selectAvatar: function(t) {
            var e = s(t.currentTarget),
                i = e.data("image");
            this.$avatars.children().removeClass("selected"), e.addClass("selected"), this.selected = i
        }
    })
}(window.Application, chatConfig, jQuery),
function(t, e, s) {
    var i = t.SelectCannedMessageView = Backbone.View.extend({
        events: {
            "mousedown .customer-chat-content-canned-message": "selectMessage"
        },
        initialize: function() {
            this.listenTo(this.model, "change", this.render)
        },
        render: function() {
            this.$el.html(t.template.selectCannedMessageContent), this.$messages = this.$(".messages");
            for (var e = this.model.get("messages"), a = 0; a < e.length; a++) {
                var n = s('<a class="customer-chat-content-canned-message"></a>'),
                    o = this.model.getParametrizedMessage(e[a].body),
                    r = e[a].name,
                    h = o;
                h.length > i.DISPLAY_BODY_MAX_LENGTH && (h = h.slice(0, i.DISPLAY_BODY_MAX_LENGTH) + "..."), r.length > i.DISPLAY_NAME_MAX_LENGTH && (r = r.slice(0, i.DISPLAY_NAME_MAX_LENGTH) + "..."), n.html("<b>" + r + "</b> (<i>" + h + "</i>)").data("message", o), this.$messages.append(n)
            }
            return this.$el.find(".canned-messages-wrapper").mCustomScrollbar(), s(window).resize(), this
        },
        selectMessage: function(t) {
            var e = s(t.currentTarget),
                i = e.data("message");
            this.$messages.children().removeClass("selected"), e.addClass("selected"), this.selected = i
        }
    }, {
        DISPLAY_NAME_MAX_LENGTH: 50,
        DISPLAY_BODY_MAX_LENGTH: 100
    })
}(window.Application, chatConfig, jQuery),
function(t, e, s) {
    var i = t.HistoryView = Backbone.View.extend({
        events: {
            "click #customer-chat-history-search": "search",
            "click #customer-chat-history-clear": "clear",
            "keydown input": "searchOnEnter",
            "click .customer-chat-history-item": "showConversation",
            "click #history-list-display-more": "displayMoreResults"
        },
        searching: !1,
        lastSearch: {
            items: [],
            displayed: 0
        },
        initialize: function() {
            this.model = t.model.chat, this.$results = this.$("#customer-chat-history-search-results"), this.$inputs = this.$("*[name]"), this.$search = this.$("#customer-chat-history-search"), this.$clear = this.$("#customer-chat-history-clear"), this.$loading = this.$(".customer-chat-content-loading-icon").hide(), this.$resultItems = this.$("#customer-chat-history-search-results .customer-chat-content-messages-wrapper"), this.$displayMore = e(t.template.historyListDisplayMore), this.$chatHeader = this.$("#customer-chat-talk-header"), this.$headerUser1 = this.$("#history-chat-user-1"), this.$headerId1 = this.$("#history-chat-id-1"), this.$headerMail1 = this.$("#history-chat-mail-1"), this.$headerUser2 = this.$("#history-chat-user-2"), this.$headerId2 = this.$("#history-chat-id-2"), this.$headerMail2 = this.$("#history-chat-mail-2"), this.$headerAvatar1 = this.$("#history-chat-avatar-1"), this.$headerAvatar2 = this.$("#history-chat-avatar-2"), this.$headerDate = this.$chatHeader.find(".date-info"), this.$(".date-input").datepicker(), this.$results.mCustomScrollbar();
            var s = this.user = t.model.user;
            s.hasRole("ADMIN") || this.$clear.hide(), this.chatBoxView = new t.ChatBoxView({
                el: this.$("#history-results-chat"),
                model: new t.ChatViewModel,
                fullDate: !0
            }), this.model.on("change", this.render, this), this.model.on("request", this.disable, this), this.model.on("sync", this.enable, this), this.listenTo(t, "history.search", this.autoSearch), this.render()
        },
        search: function() {
            if (!this.searching) {
                this.searching = !0, this.clearSearchResults();
                var t = {};
                this.$inputs.each(function() {
                    var s = e(this);
                    s.val() && (t[s.attr("name")] = "checkbox" == s.attr("type") ? s.is(":checked") ? "true" : "false" : s.val())
                }), this.model.queryHistory(t, e.proxy(this.onQueryResults, this), e.proxy(this.onQueryError, this))
            }
        },
        searchOnEnter: function(t) {
            13 === t.which && this.search()
        },
        clear: function() {
            var s = this;
            t.view.dialogs.confirm("Clear history", "Are you sure you want to clear all of the messages?", {
                "Clear messages": function() {
                    s._clear(), e(this).dialog("close")
                }
            })
        },
        _clear: function() {
            this.chatBoxView.clear(), this.$chatHeader.hide(), this.clearSearchResults(), this.model.clearHistory(e.proxy(this.onClear, this), e.proxy(this.onClearError))
        },
        autoSearch: function(t) {
            this.$inputs.each(function() {
                var s = e(this),
                    i = s.attr("name");
                void 0 !== typeof t[i] && s.val(t[i])
            }), this.search()
        },
        onQueryError: function() {
            this.searching = !1
        },
        onQueryResults: function(t) {
            this.searching = !1, this.prepareResults(t), this.lastSearch.items = t, this.lastSearch.displayed = 0, this.clearSearchResults(), this.displayMoreResults()
        },
        onClearError: function() {
            t.view.dialogs.message("Clear history", "Error clearing the history")
        },
        onClear: function() {
            t.view.dialogs.message("Clear history", "Message history cleared")
        },
        displayMoreResults: function() {
            var t = this.lastSearch.items,
                e = this.lastSearch.displayed;
            if (e < t.length) {
                var s = Math.max(0, Math.min(t.length, e + i.RESULTS_DISPLAY_COUNT));
                this.addSearchResults(t.slice(e, s)), e = s
            }
            t.length > e ? this.$resultItems.append(this.$displayMore.show()) : this.$displayMore.remove(), this.$results.mCustomScrollbar("update"), this.lastSearch.displayed = e
        },
        render: function() {
            return this
        },
        setSearchResults: function(t) {
            this.clearSearchResults(), this.addSearchResults(t)
        },
        addSearchResults: function(t) {
            for (var e = 0; e < t.length; e++) this.addSearchResult(t[e])
        },
        clearSearchResults: function() {
            this.$resultItems.html(""), this.$results.mCustomScrollbar("update")
        },
        addSearchResult: function(i) {
            var a = i[0],
                n = e(t.template.historyListItem),
                o = new Date(a.datetime),
                r = o.getDate() < 10 ? "0" + o.getDate() : o.getDate(),
                h = o.getMonth() + 1 < 10 ? "0" + (o.getMonth() + 1) : o.getMonth() + 1,
                l = isNaN(o.getDay()) ? "" : r + "." + h + "." + o.getFullYear(),
                d = new t.MessageModel(a);
            n.find(".customer-chat-history-item-username").html(d.getTalkName()), n.find(".customer-chat-history-item-time").html(l);
            var c = s.clone(d.attributes);
            c.author = c.author + " (" + c.authorMail + ")", n.data("info", i), this.$resultItems.append(n), this.$results.mCustomScrollbar("update")
        },
        showConversation: function(s) {
            this.chatBoxView.clear();
            var i = e(s.currentTarget),
                a = i.data("info"),
                n = new t.MessageModel(a[0]),
                o = new t.MessageModel(a[a.length - 1]);
            n.fromUser.image && this.$headerAvatar1.css("background-image", 'url("' + n.fromUser.image + '")'), n.toUser && n.toUser.image && this.$headerAvatar2.css("background-image", 'url("' + n.toUser.image + '")'), this.$headerUser1.html(n.getReadableName()), this.$headerId1.html(n.get("author")), this.$headerMail1.html(n.get("authorMail")), this.$headerUser2.html(n.getToUserReadableName()), this.$headerId2.html(n.get("toAuthor")), this.$headerMail2.html(n.get("toAuthorMail")), this.$headerDate.html(n.get("datetime") + " — " + o.get("datetime")), this.$chatHeader.show(), a.sort(function(t, e) {
                return t.datetime > e.datetime ? 1 : -1
            });
            for (var r = 0; r < a.length; r++) {
                var h = a[r];
                h.info = h.from_user_info.info, this.chatBoxView.addMessage(new t.MessageModel(h), !1, !0)
            }
        },
        prepareResults: function(t) {
            for (var e = 0; e < t.length; e++) {
                var s = t[e];
                s.roles && -1 !== s.roles.toLowerCase().indexOf("guest") && (s.name = -1 !== s.name.lastIndexOf("-") ? s.name.slice(0, s.name.lastIndexOf("-")) : s.name)
            }
        }
    }, {
        RESULTS_DISPLAY_COUNT: 20
    })
}(window.Application, jQuery, _),
function(t, e, s) {
    var i = t.WindowView = Backbone.View.extend({
        initialize: function() {
            this.settings = t.model.settings;
            var s = this.user = t.model.user;
            s.hasRole("ADMIN") && (this.settingsView = new t.SettingsView({
                el: this.$(".customer-chat-tab-content-settings-ui")
            }), this.widgetThemeView = new t.WidgetThemeView({
                el: this.$(".customer-chat-tab-content-widget-theme")
            }), this.logsView = new t.LogsView({
                el: this.$("#customer-chat-admin-logs")
            })), this.chatTabView = new t.ChatTabView({
                el: this.$("#customer-chat-admin-chat")
            }), this.operatorsView = new t.OperatorsView({
                el: this.$("#customer-chat-operators-tab")
            }), this.cannedMessagesView = new t.CannedMessagesView({
                el: this.$("#customer-chat-canned-messages-tab")
            }), this.historyView = new t.HistoryView({
                el: this.$("#customer-chat-history")
            }), this.tabsView = new t.TabsView({
                el: this.$("#customer-chat-admin-settings")
            }), this.menuView = new t.MenuView({
                el: this.el,
                windowView: this
            }), s.hasRole("ADMIN") || (this.tabsView.removeTab(0), this.tabsView.removeTab(1), this.tabsView.removeTab(1), this.$(".customer-chat-tab-button.operators").html("Edit profile")), this.user.hasRole("OPERATOR") && (this.titleText = document.title, this.listenTo(this.chatTabView, "talks.read", this.stopMsgIndicator), this.listenTo(this.chatTabView, "talks.unread", this.startMsgIndicator)), this.$("#customer-chat-admin-settings .customer-chat-content-messages").bind("show", function() {
                e(window).trigger("resize")
            }).not("#customer-chat-history .customer-chat-content-messages").mCustomScrollbar(), window.alert = function(e) {
                t.view.dialogs.message("Alert", e)
            }, this.$el.animate({
                opacity: 1
            }, {
                duration: "slow",
                complete: this.checkInstall
            }), this.listenTo(t, "history.search", this.showHistory)
        },
        showHistory: function() {
            this.menuView.showSettings(), this.tabsView.showTab(this.user.hasRole("OPERATOR") ? 2 : 4)
        },
        startMsgIndicator: function() {
            this.msgIndicatorTimer || (this.msgIndicatorTimer = setInterval(e.proxy(this.indicateMsg, this), i.MSG_INDICATOR_INTERVAL))
        },
        stopMsgIndicator: function() {
            this.msgIndicatorTimer && (clearInterval(this.msgIndicatorTimer), document.title = this.titleText, delete this.msgIndicatorTimer)
        },
        indicateMsg: function() {
            document.title = "!" !== document.title ? "!" : this.titleText
        },
        checkInstall: function() {
            s.installStatus.validConfig && s.installStatus.validDb || (t.model.user.hasRole("ADMIN") ? t.view.dialogs.confirm("Incorrect installation", t.template.invalidInstallDialogContent, {
                "Edit configuration": function() {
                    (document.location || window.location).href = s.installWizardPath
                }
            }) : t.view.dialogs.message("Please install first", "The application is not yet installed, please log in as administrator and install it before using")), s.ui.installed || (t.model.user.hasRole("ADMIN") ? t.view.dialogs.confirm("Install", t.template.installDialogContent, {
                Install: function() {
                    (document.location || window.location).href = s.installPath
                }
            }) : t.view.dialogs.message("Please install first", "The application is not yet installed, please log in as administrator and install it before using"))
        }
    }, {
        MSG_INDICATOR_INTERVAL: 1e3
    })
}(window.Application, jQuery, window.chatConfig),
function(t, e) {
    t.DialogsView = Backbone.View.extend({
        initialize: function() {
            this.$confirm = e(t.template.confirmDialog), this.$formError = e(t.template.formErrorDialog)
        },
        confirm: function(s, i, a, n) {
            i && (i instanceof Backbone.View ? this.$confirm.html("").append(i.render().el) : this.$confirm.html(i)), a.Cancel || (a.Cancel = function() {
                e(this).dialog("close")
            }), this.$confirm.dialog({
                title: s,
                resizable: !1,
                modal: !0,
                width: n ? n : 400,
                maxWidth: 900,
                height: "auto",
                buttons: a,
                show: "fade",
                position: { of: t.view.window.$el
                }
            })
        },
        formError: function(s, i) {
            this.$formError.html("");
            for (var a = 0; a < i.length; a++) {
                var n = e("<p>"),
                    o = i[a];
                o && o.length > 0 && n.html(i[a]), this.$formError.append(n)
            }
            this.$formError.dialog({
                title: s,
                resizable: !1,
                modal: !0,
                width: 400,
                height: "auto",
                buttons: {
                    Close: function() {
                        e(this).dialog("close")
                    }
                },
                show: "fade",
                position: { of: t.view.window.$el
                }
            })
        },
        message: function(s, i) {
            this.$formError.html("<p>" + i + "</p>"), this.$formError.dialog({
                title: s,
                resizable: !1,
                modal: !0,
                width: 400,
                height: "auto",
                buttons: {
                    Close: function() {
                        e(this).dialog("close")
                    }
                },
                show: "fade",
                position: { of: t.view.window.$el
                }
            })
        }
    })
}(window.Application, jQuery),
function(t, e, s) {
    t.UserInfoPopoverView = Backbone.View.extend({
        initialize: function(t) {
            var e = s(t.button);
            e.popover({
                placement: "top",
                trigger: "manual",
                container: "body",
                title: "User info",
                html: !0,
                content: this.render().$el
            }).mouseenter(function() {
                var t = s(this);
                s("body > .popover").remove(), t.popover("show");
                var e = s("body > .popover");
                t.add(e).bind("mouseleave", function() {
                    setTimeout(function() {
                        e.underMouse() || e.remove()
                    }, 250)
                })
            })
        },
        render: function() {
            return this.$el.html(t.template.userInfoPopoverContent), this.$("#user-popover-name").html(this.model.getReadableName()), this.$("#user-popover-id").html(this.model.get("author") || this.model.get("name")), this.$("#user-popover-mail").html(this.model.get("authorMail") || this.model.get("mail")), this.$("#user-popover-ip").html(this.model.has("info") ? this.model.get("info").ip : "PRIVATE"), this.model.fromUser && this.model.fromUser.image ? this.$(".avatar").css("background-image", 'url("' + this.model.fromUser.image + '")') : this.model.get("image") && this.$(".avatar").css("background-image", 'url("' + this.model.get("image") + '")'), this.model.has("info") || this.$("#user-popover-ip").parent().hide(), this
        }
    })
}(window.Application, chatConfig, jQuery), jQuery(function(t) {
    var e = window.chatConfig;
    t.get(e.templatesPath, function(e) {
        var s = t(e),
            i = window.Application;
        i.service.soundPlayer = new i.SoundPlayer, i.template.message = s.find("#message").html(), i.template.operatorItem = s.find("#operator-item").html(), i.template.cannedMessageItem = s.find("#canned-message-item").html(), i.template.installDialogContent = s.find("#dialog-install-content").html(), i.template.invalidInstallDialogContent = s.find("#dialog-invalid-install-content").html(), i.template.confirmDialog = s.find("#dialog-confirm").html(), i.template.formErrorDialog = s.find("#dialog-form-error").html(), i.template.selectAvatarContent = s.find("#dialog-select-avatar-content").html(), i.template.selectCannedMessageContent = s.find("#dialog-select-canned-message-content").html(), i.template.historyListItem = s.find("#history-list-item").html(), i.template.historyListDisplayMore = s.find("#history-list-display-more").html(), i.template.userInfoPopoverContent = s.find("#user-info-popover-content").html(), i.template.tabButtonChat = s.find("#tab-button-chat").html(), i.template.tabContentChat = s.find("#tab-content-chat").html(), i.model.user = new i.UserModel(window.userData), i.model.uiSettings = new i.UISettingsModel, i.model.logs = new i.LogsModel, i.model.cannedMessages = new i.CannedMessagesModel, i.model.settings = new i.AdminSettingsModel, i.model.chat = new i.AdminChatModel, i.model.user.listenTo(i.model.chat, "operator:saved", function(t) {
            t.id === this.get("id") && this.set(t)
        }), i.view.dialogs = new i.DialogsView, i.view.window = new i.WindowView({
            el: "#customer-chat",
            model: i.model.chat
        })
    })
});